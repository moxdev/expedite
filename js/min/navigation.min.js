"use strict";function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}Array.from||(Array.from=function(){var e=Object.prototype.toString,c=function(t){return"function"==typeof t||"[object Function]"===e.call(t)},r=Math.pow(2,53)-1,s=function(t){var e,n=(e=Number(t),isNaN(e)?0:0!==e&&isFinite(e)?(0<e?1:-1)*Math.floor(Math.abs(e)):e);return Math.min(Math.max(n,0),r)};return function(t){var e=Object(t);if(null==t)throw new TypeError("Array.from requires an array-like object - not null or undefined");var n,r=1<arguments.length?arguments[1]:void 0;if(void 0!==r){if(!c(r))throw new TypeError("Array.from: when provided, the second argument must be a function");2<arguments.length&&(n=arguments[2])}for(var i,o=s(e.length),a=c(this)?Object(new this(o)):new Array(o),l=0;l<o;)i=e[l],a[l]=r?void 0===n?r(i,l):r.call(n,i,l):i,l+=1;return a.length=o,a}}()),function(t,e){function r(t){return t.scrollHeight}function n(t,e){var n=r(t)+r(e)+30;t.style.transform="translateY(-"+n+"px)"}function i(){0==this.nextElementSibling.style.maxHeight?this.nextElementSibling.style.maxHeight=this.nextElementSibling.scrollHeight+"px":this.nextElementSibling.style.maxHeight=this.nextElementSibling.style.maxHeight=null,this.classList.toggle("active")}n(t,e),document.querySelector(".mobile-menu-toggle").addEventListener("click",function(){n(t,e),t.classList.toggle("active"),this.classList.toggle("active")}),_toConsumableArray(document.querySelectorAll(".arrow")).forEach(function(t){t.addEventListener("click",i)}),window.addEventListener("resize",function(){n(t,e)})}(document.getElementById("main-navigation"),document.getElementById("masthead"));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
