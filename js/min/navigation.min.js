"use strict";function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}Array.from||(Array.from=function(){var e=Object.prototype.toString,l=function(t){return"function"==typeof t||"[object Function]"===e.call(t)},i=Math.pow(2,53)-1,c=function(t){var e,n=(e=Number(t),isNaN(e)?0:0!==e&&isFinite(e)?(0<e?1:-1)*Math.floor(Math.abs(e)):e);return Math.min(Math.max(n,0),i)};return function(t){var e=Object(t);if(null==t)throw new TypeError("Array.from requires an array-like object - not null or undefined");var n,i=1<arguments.length?arguments[1]:void 0;if(void 0!==i){if(!l(i))throw new TypeError("Array.from: when provided, the second argument must be a function");2<arguments.length&&(n=arguments[2])}for(var r,a=c(e.length),o=l(this)?Object(new this(a)):new Array(a),s=0;s<a;)r=e[s],o[s]=i?void 0===n?i(r,s):i.call(n,r,s):r,s+=1;return o.length=a,o}}()),function(){var t=document.querySelector(".menu-toggle"),e=document.querySelector("#mobile-nav-overlay");function n(){var t=this;0==this.nextElementSibling.style.maxHeight?(this.setAttribute("aria-expanded",!0),this.nextElementSibling.classList.add("open"),setTimeout(function(){t.nextElementSibling.style.maxHeight="100vh"},100)):(this.setAttribute("aria-expanded",!1),this.nextElementSibling.style.maxHeight=this.nextElementSibling.style.maxHeight=null,setTimeout(function(){t.nextElementSibling.classList.remove("open")},275)),this.classList.toggle("active")}t.addEventListener("click",function(){this.classList.contains("active")?(this.setAttribute("aria-expanded","false"),e.classList.remove("open"),setTimeout(function(){e.classList.remove("active")},375)):(this.setAttribute("aria-expanded","true"),e.classList.add("active"),setTimeout(function(){e.classList.add("open")},50)),this.classList.toggle("active")}),_toConsumableArray(document.querySelectorAll(".toggle-sub-menu")).forEach(function(t){t.addEventListener("click",n)});var i=_toConsumableArray(document.querySelectorAll(".desktop-main-navigation li")),r=_toConsumableArray(document.querySelectorAll(".desktop-main-navigation a"));r.forEach(function(e){e.addEventListener("focus",function(){var t=function(t){for(var e=[];t&&!t.classList.contains("desktop-main-navigation");t=t.parentNode)e.unshift(t);return e}(e);i.forEach(function(t){t.classList.remove("focus")}),t[t.length-2].classList.contains("menu-item-has-children")&&e.parentElement.classList.add("focus"),t[t.length-3].classList.contains("sub-menu")&&t.forEach(function(t){"li"===t.localName&&t.classList.add("focus")})}),e.addEventListener("focusout",function(){i.forEach(function(t){t.classList.remove("focus")})})})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
