"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}!function(t){"object"===("undefined"==typeof module?"undefined":_typeof(module))&&"object"===_typeof(module.exports)?t(require("jquery"),window,document):t(jQuery,window,document)}(function(R,D,z){var _=R("<div/>").attr("class","imagelightbox-loading").append(R("<div/>")),t=R("<button/>",{type:"button",class:"imagelightbox-arrow imagelightbox-arrow-left"}),e=R("<button/>",{type:"button",class:"imagelightbox-arrow imagelightbox-arrow-right"}),X=t.add(e),j=R("<div/>",{class:"imagelightbox-caption",html:"&nbsp;"}),N=R("<button/>",{type:"button",class:"imagelightbox-close"}),U=R("<div/>",{class:"imagelightbox-overlay"}),V=R("<a/>",{href:"#",class:"imagelightbox-navitem"}),K=R("<div/>",{class:"imagelightbox-nav"}),Y=R("<div/>",{class:"imagelightbox-wrapper"}),H=R("body"),o=function(){var t=z.body||z.documentElement;return""===(t=t.style).WebkitTransition?"-webkit-":""===t.MozTransition?"-moz-":""===t.OTransition?"-o-":""===t.transition&&""},W=!1!==o(),$=function(t,e,i){var n={},a=o();n[a+"transform"]="translateX("+e+") translateY(-50%)",n[a+"transition"]=a+"transform "+i+"s ease-in",t.css(n)},B="ontouchstart"in D,Q=D.navigator.pointerEnabled||D.navigator.msPointerEnabled,A=function(t){if(B)return!0;if(!Q||void 0===t||void 0===t.pointerType)return!1;if(void 0!==t.MSPOINTER_TYPE_MOUSE){if(t.MSPOINTER_TYPE_MOUSE!==t.pointerType)return!0}else if("mouse"!==t.pointerType)return!0;return!1},G=!1!=!!(z.fullscreenEnabled||z.webkitFullscreenEnabled||z.mozFullScreenEnabled||z.msFullscreenEnabled),J=!(!D.history||!history.pushState);R.fn.imageLightbox=function(t){var i="",c=R([]),u=R(),s=R([]),r=-1,d=R(),f=0,l=0,g=0,p=!1,n=0,h=R.extend({selector:"a[data-imagelightbox]",id:"imagelightbox",allowedTypes:"png|jpg|jpeg|gif",animationSpeed:250,activity:!1,arrows:!1,button:!1,caption:!1,enableKeyboard:!0,history:!1,fullscreen:!1,gutter:10,offsetY:0,navigation:!1,overlay:!1,preloadNext:!0,quitOnEnd:!1,quitOnImgClick:!1,quitOnDocClick:!0,quitOnEscKey:!0},t),b=function(){h.activity&&S(),h.arrows&&X.css("display","block")},a=function(t,e,i){var n=e+"="+i,a="?"+n;if(t){var o=new RegExp("([?&])"+e+"=[^&]*");a=null!==t.match(o)?t.replace(o,"$1"+n):t+"&"+n}return a},o=function(){if(J&&h.history){var t=c[r].dataset.ilb2Id;t||(t=r);var e={imageLightboxIndex:t},i=c[r].dataset.imagelightbox;i&&(e.imageLightboxSet=i);var n=a(z.location.search,"imageLightboxIndex",t);i&&(n=a(n,"imageLightboxSet",i)),D.history.pushState(e,"",z.location.pathname+n)}},e=function(t,e){var i=t;if(i){var n=new RegExp("[?]"+e+"=[^&]*"),a=new RegExp("&"+e+"=[^&]*");i=(i=i.replace(n,"?")).replace(a,"")}return i},m=function(t){var e=new RegExp("[?&]"+t+"(=([^&#]*)|&|#|$)").exec(z.location.search);if(e&&e[2])return decodeURIComponent(e[2].replace(/\+/g," "))},v=function(){if(J&&h.history){var t=m("imageLightboxIndex");if(t){var e=c.filter('[data-ilb2-id="'+t+'"]');0<e.length?r=c.index(e):e=R(c[r=t]);var i=m("imageLightboxSet");!e[0]||i&&i!==e[0].dataset.imagelightbox||L(e,!0)}}},x=function(){if(--r<0){if(!0===h.quitOnEnd)return P(),!1;r=c.length-1}u=c.eq(r),o(),Y.trigger("previous.ilb2",u),T(1)},y=function(){if(++r>=c.length){if(!0===h.quitOnEnd)return P(),!1;r=0}o(),u=c.eq(r),Y.trigger("next.ilb2",u),T(-1)},w=function(){Y.append(_)},S=function(){R(".imagelightbox-loading").remove()},E=function(){Y.append(U)},q=function(){N.appendTo(Y).on("click.ilb7",function(){return P(),!1})},I=function(){j.html("&nbsp;"),R(u).data("ilb2-caption")?j.html(R(u).data("ilb2-caption")):0<R(u).find("img").length&&j.html(R(u).find("img").attr("alt"))},k=function(){if(c.length){for(var t=0;t<c.length;t++)K.append(V.clone());var e=K.children("a");e.eq(c.index(u)).addClass("active"),Y.on("previous.ilb2 next.ilb2",function(){e.removeClass("active").eq(c.index(u)).addClass("active")}),Y.append(K),K.on("click.ilb7 touchend.ilb7",function(){return!1}).on("click.ilb7 touchend.ilb7","a",function(){var t=R(this);if(c.eq(t.index()).attr("href")!==R(".imagelightbox").attr("src")){var e=c.eq(t.index());e.length&&(n=c.index(u),u=e,T(t.index()<n?-1:1))}t.addClass("active").siblings().removeClass("active")})}},O=function(){Y.append(X),X.on("click.ilb7 touchend.ilb7",function(t){return t.stopImmediatePropagation(),t.preventDefault(),R(this).hasClass("imagelightbox-arrow-left")?x():y(),!1})},C=function(){if(!d.length)return!0;var t=h.caption?j.outerHeight():0,a=R(D).width(),o=R(D).height()-t,r=Math.abs(1-h.gutter/100);function e(){if(a<f||o<l){var t=a/o<f/l?f/a:l/o;f/=t,l/=t}var e=l*r,i=f*r,n=(R(D).width()-i)/2;d.css({width:i+"px",height:e+"px",left:n+"px"})}if(void 0!==d.get(0).videoWidth)return f=d.get(0).videoWidth,l=d.get(0).videoHeight,void e();var i=new Image;i.src=d.attr("src"),i.onload=function(){f=i.width,l=i.height,e()}},T=function(l){if(p)return!1;if(d.length){var t={opacity:0};W?$(d,100*l-g+"px",h.animationSpeed/1e3):t.left=parseInt(d.css("left"))+100*l+"px",d.animate(t,h.animationSpeed,function(){F()}),g=0}p=!0,h.activity&&w(),h.caption&&I(),setTimeout(function(){var t,e,i=u.attr("href"),n=0,a=0,o=0;function r(){var t={opacity:1};if(d.appendTo(Y),C(),d.css("opacity",0),W)$(d,-100*l+"px",0),setTimeout(function(){$(d,"0px",h.animationSpeed/1e3)},50);else{var e=parseInt(d.css("left"));t.left=e+"px",d.css("left",e-100*l+"px")}if(d.animate(t,h.animationSpeed,function(){p=!1,b()}),h.preloadNext){var i=c.eq(c.index(u)+1);i.length||(i=c.eq(0)),R("<img />").attr("src",i.attr("href"))}Y.trigger("loaded.ilb2")}u.data("ilb2Video")?s.each(function(){this.i===u.data("ilb2VideoId")&&(t=this.l,e=this.e,this.a&&(!1===t&&e.attr("autoplay",this.a),!0===t&&e.get(0).play()))}):e=R("<img id='"+h.id+"' />").attr("src",i),d=e.on("load.ilb7",r).on("error.ilb7",function(){b()}).on(Q?"pointerup.ilb7 MSPointerUp.ilb7":"click.ilb7",function(t){return t.preventDefault(),h.quitOnImgClick?(P(),!1):!!A(t.originalEvent)||void((t.pageX||t.originalEvent.pageX)-t.target.offsetLeft<f/2?x():y())}).on("touchstart.ilb7 pointerdown.ilb7 MSPointerDown.ilb7",function(t){if(!A(t.originalEvent)||h.quitOnImgClick)return!0;W&&(o=parseInt(d.css("left"))),n=t.originalEvent.pageX||t.originalEvent.touches[0].pageX}).on("touchmove.ilb7 pointermove.ilb7 MSPointerMove.ilb7",function(t){if(!Q&&"pointermove"===t.type||!A(t.originalEvent)||h.quitOnImgClick)return!0;t.preventDefault(),a=t.originalEvent.pageX||t.originalEvent.touches[0].pageX,g=n-a,W?$(d,-g+"px",0):d.css("left",o-g+"px")}).on("touchend.ilb7 touchcancel.ilb7 pointerup.ilb7 pointercancel.ilb7 MSPointerUp.ilb7 MSPointerCancel.ilb7",function(t){if(!A(t.originalEvent)||h.quitOnImgClick)return!0;50<Math.abs(g)?g<0?x():y():W?$(d,"0px",h.animationSpeed/1e3):d.animate({left:o+"px"},h.animationSpeed/2)}),!0===t&&r(),!1===t&&(d=d.on("loadedmetadata.ilb7",r))},h.animationSpeed+100)},F=function(){if(!d.length)return!1;d.remove(),d=R()},L=function(t,e){if(p)return!1;p=!1,u=t,r=c.index(u),e||o(),function(){h.arrows&&O(this),h.navigation&&k(),h.overlay&&E(),h.button&&q(),h.caption&&Y.append(j)}(),H.append(Y).addClass("imagelightbox-open"),Y.trigger("start.ilb2",t),T(0)},P=function(t){if(r=-1,t||function(){if(J&&h.history){var t=e(z.location.search,"imageLightboxIndex");t=e(t,"imageLightboxSet"),D.history.pushState({},"",z.location.pathname+t)}}(),Y.trigger("quit.ilb2"),H.removeClass("imagelightbox-open"),!d.length)return!1;d.animate({opacity:0},h.animationSpeed,function(){F(),p=!1,Y.remove().find("*").remove()})},M=function(e){e.each(function(){c=e.add(R(this))}),e.on("click.ilb7",{set:i},function(t){t.preventDefault(),i=R(t.currentTarget).data("imagelightbox"),e.filter(function(){return R(this).data("imagelightbox")===i}).filter(function(){return t=R(this),"a"===R(t).prop("tagName").toLowerCase()&&(new RegExp(".("+h.allowedTypes+")$","i").test(R(t).attr("href"))||R(t).data("ilb2Video"));var t}).each(function(){c=c.add(R(this))}),c.length<1?P():L(R(this))})};return R(D).on("resize.ilb7",C),J&&h.history&&R(D).on("popstate",function(t){var e=t.originalEvent.state;if(e){var i=e.imageLightboxIndex;if(void 0!==i){var n=c.filter('[data-ilb2-id="'+i+'"]');if(0<n.length)var a=c.index(n);else n=R(c[a=i]);if(n[0]&&(!e.imageLightboxSet||e.imageLightboxSet===n[0].dataset.imagelightbox))if(r<0)L(n,!0);else{var o=1;r<a&&(o=-1),u=n,r=a,T(o)}}else P(!0)}else P(!0)}),R(z).ready(function(){h.quitOnDocClick&&R(z).on(B?"touchend.ilb7":"click.ilb7",function(t){d.length&&!R(t.target).is(d)&&(t.preventDefault(),P())}),h.fullscreen&&G&&R(z).on("keydown.ilb7",function(t){if(!d.length)return!0;var e;-1<[9,32,38,40].indexOf(t.which)&&(t.stopPropagation(),t.preventDefault()),-1<[13].indexOf(t.which)&&(t.stopPropagation(),t.preventDefault(),(e=z.getElementById(h.id).parentElement).requestFullscreen?e.requestFullscreen():e.mozRequestFullScreen?e.mozRequestFullScreen():e.webkitRequestFullscreen?e.webkitRequestFullscreen():e.msRequestFullscreen&&e.msRequestFullscreen(),z.exitFullscreen?z.exitFullscreen():z.mozCancelFullScreen?z.mozCancelFullScreen():z.webkitExitFullscreen&&z.webkitExitFullscreen())}),h.enableKeyboard&&R(z).on("keydown.ilb7",function(t){if(!d.length)return!0;-1<[27].indexOf(t.which)&&h.quitOnEscKey&&(t.stopPropagation(),t.preventDefault(),P()),-1<[37].indexOf(t.which)&&(t.stopPropagation(),t.preventDefault(),x()),-1<[39].indexOf(t.which)&&(t.stopPropagation(),t.preventDefault(),y())})}),R(z).off("click",h.selector),M(R(this)),v(),c.each(function(){var t=R(this).data("ilb2Video");if(t){var e=R(this).data("ilb2Id");e||(e="a"+(65536*(1+Math.random())|0).toString(16)),R(this).data("ilb2VideoId",e);var n={e:R("<video id='"+h.id+"' preload='metadata'>"),i:e,l:!1,a:void 0};R.each(t,function(t,e){"autoplay"===t?n.a=e:"sources"!==t&&(n.e=n.e.attr(t,e))}),t.sources&&R.each(t.sources,function(t,e){var i=R("<source>");R.each(e,function(t,e){i=i.attr(t,e)}),n.e.append(i)}),n.e.on("loadedmetadata.ilb7",function(){n.l=!0}),s=s.add(n)}}),this.addToImageLightbox=function(t){M(t)},this.openHistory=function(){v()},this.loadPreviousImage=function(){x()},this.loadNextImage=function(){y()},this.quitImageLightbox=function(){return P(),this},this.startImageLightbox=function(t){t?t.trigger("click.ilb7"):R(this).trigger("click.ilb7")},this}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
